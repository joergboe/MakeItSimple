#!/usr/bin/env bash

my_install_dir=
my_command="${0##*/}"
if [[ "$0" == /* ]]; then
	my_install_dir="${0%"/bin/${my_command}"}"
elif [[ "$0" == "${my_command}" ]]; then
	x="$(which "${my_command}")"
	my_install_dir="${x%"/bin/${my_command}"}"
else
	x="$(pwd -P)/$0"
	my_install_dir="${x%"/bin/${my_command}"}"
fi

usage() {
	cat <<-EOF
		The Make It Simple project wizard - generate the makefile.
		Usage: ${my_command} [option..]

		OPTIONS:
		-h|--help                      : Display this help.
		--help=type                    : Print project type information.
		-n|--no-prompt|--noprompt      : Do not enter the interactive mode and use the command line options only.
		-s|--src|--source VALUE        : The source directory. The installation base directory. The default
		                                 value is detected from the location of the ${my_command} script.
		-d|--dest|--destination VALUE  : The base directory of the C/C++ project.
		-t|--type|--project-type VALUE : The type of the project. Valid types are: otocpp, ipbcpp, opbcpp, opbc, opb.
		                                 To find out more about the types use option --help=type
		-c|--copy-warn                 : Make a local copy of the warning files in the project directory.
		-o|--overwrite                 : Overwrite an existing makefile in destination.
	EOF
}

# check whether directory $1 contains valid install files
check_install_dir() {
	if [[ $# -ne 1 ]]; then
		echo "Wrong invocation ${FUNCNAME[0]}" >&2
		exit 1
	fi
	if [[ -z $1 ]]; then
		echo "empty string for source dir"
		return 1
	fi
	local mypath="${1}"
	local x
	for x in ${all_install_files}; do
		#echo "checking: ${mypath}/${x}"
		if [[ ! -f "${mypath}/${x}" ]]; then
			echo "Source dir '$1' is not a valid installation!"
			return 1
		fi
	done
	return 0
}

# check whether directory $1 is a directory and is writable
check_dest_dir() {
	if [[ $# -ne 1 ]]; then
		echo "Wrong invocation ${FUNCNAME[0]}" >&2
		exit 1
	fi
	if [[ ! -d "$1" ]]; then
		echo "Destination directory '$1' does not exsist"
		return 1
	else
		if [[ ! -w "$1" ]]; then
			echo "Destination directory $1 is not writable."
			return 1
		fi
	fi
	return 0
}

# check whether $1 is a valid project type
check_type() {
	if [[ $# -ne 1 ]]; then
		echo "Wrong invocation ${FUNCNAME[0]}" >&2
		exit 1
	fi
	local x
	local is_valid=''
	for x in $valid_types; do
		if [[ "$1" == "$x" ]]; then
			is_valid='true'
			break
		fi
	done
	if [[ -n "$is_valid" ]]; then
		return 0
	else
		echo -e "Invalid project type: $1\nValid types are: $valid_types"
		return 1
	fi
}

readonly valid_types='otocpp ipbcpp opbc opbcpp opb'
readonly mks='mktsimple'
readonly all_install_files='in_place_cpp.mk in_place_cpp.mk out_place_c.mk out_place_cpp.mk out_place_cpp.mk'
pr1='Enter the destination directory - the project directory.
(^D to exit) [.] '
pr2="Enter the share/${mks} dir of your private installation."$'\n'
pr2+="(^D to exit) [${my_install_dir}/share/${mks}] "
pr3=('otocpp -- C++ project   One To One      - Build executable targets from each %.cpp and %.cc source file in the project directory.'
     'ipbcpp -- C++ project   In Place Build  - Build one executable from all %.cpp and %.cc source files in the project directory.'
     'opbcpp -- C++ project   Out Place Build - Build one executable from all %.cpp and %.cc source files in all project source directories.'
     'opbc   -- C project     Out Place Build - Build one executable from all %.c source files in all project source directories.'
     'opb    -- C/C++ project Out Place Build - Build one executable from all C++, C and assembler source files in all project source directories.'
     'exit'
)
readonly pr1 pr2 pr3

invalid_parameter=''
missing_value=''
helprequest=''
typehelprequest=''
no_prompt=''
src_dir=''
dest_dir=''
pr_type=''
copy_warn=''
overwrite=''

# get parameters
while [[ $# -gt 0 ]]; do
	one_more_shift=''
	case "$1" in
	'-h'|'--help')
		helprequest='true';;
	'--help=type')
		typehelprequest='true';;
	'-s'|'--src'|'--source')
		if [[ $# -gt 1 ]]; then
			one_more_shift='true'
			src_dir="$2"
		else
			missing_value='true'
			break
		fi;;
	'-d'|'--dest'|'--destination')
		if [[ $# -gt 1 ]]; then
			one_more_shift='true'
			dest_dir="$2"
		else
			missing_value='true'
			break
		fi;;
	'-t'|'--type'|'--project-type')
		if [[ $# -gt 1 ]]; then
			one_more_shift='true'
			pr_type="$2"
		else
			missing_value='true'
			break
		fi;;
	'-c'|'--copy-warn')
		copy_warn='true';;
	'-o'|'--overwrite')
		overwrite='true';;
	'-n'|'--no-prompt'|'--noprompt')
		no_prompt='true';;
	*)
		invalid_parameter='true'
		break;;
	esac
	shift
	if [[ -n $one_more_shift ]]; then shift; fi
done

if [[ -n $invalid_parameter ]]; then
	echo "Invalid parameter $1" >&2
	exit 2
fi
if [[ -n $missing_value ]]; then
	echo "Missing value for parameter $1" >&2
	exit 2
fi

# handle help requests
[[ -n $helprequest ]] && usage

if [[ -n ${typehelprequest} ]]; then
	declare -i i
	for ((i=0; i<${#pr3[*]}; i++)); do
		echo "${pr3[$i]}"
	done
fi
if [[ -n ${helprequest} || -n ${typehelprequest} ]]; then
	exit 0
fi

echo -e "\nMake It Simple installation in: ${my_install_dir}\n"

# request and validate destination directory
if [[ -z ${no_prompt} ]]; then
	while [[ -z ${dest_dir} ]]; do
		read -r -p "$pr1" dest_dir || exit 1
		[[ -z ${dest_dir} ]] && dest_dir='.'
		if ! check_dest_dir "${dest_dir}"; then
			dest_dir=''
		fi
	done
	echo
fi
if ! check_dest_dir >&2 "${dest_dir}"; then
	exit 1
fi

# request and validate source directory
if [[ -z ${no_prompt} ]]; then
	while [[ -z ${src_dir} ]]; do
		read -r -p "$pr2" src_dir || exit 1
		if [[ -z ${src_dir} ]]; then
			src_dir="${my_install_dir}/share/${mks}"
		fi
		if ! check_install_dir "${src_dir}"; then
			src_dir=''
		fi
	done
	echo
else
	# lookup for an installation
	if [[ -z ${src_dir} ]]; then
		src_dir="${my_install_dir}/share/${mks}"
	fi
fi
if ! check_install_dir "${src_dir}" >&2; then
	exit 1
fi

# request and validate the type of the installation
if [[ -z ${no_prompt} ]]; then
	if [[ -z $pr_type ]]; then
		echo "Enter the type of the project."
		select x in "${pr3[@]}"; do
			case $REPLY in
				1|2|3|4|5)
					echo "$x"
					pr_type="${x%%\ *}"
					break;;
				6)
					exit 1;;
			esac
		done || exit 1
	fi
	echo
fi
if ! check_type "$pr_type" >&2; then
	exit 1
fi

# request copy warnings local option
if [[ -z "${no_prompt}" && -z "${copy_warn}" ]]; then
	pr4="Make a local copy of the warning files in the project directory: (^D to exit) [y/n] "
	temp=''
	while [[ ("${temp}" != 'y') && ("${temp}" != 'yes') && ("${temp}" != 'n') && ("${temp}" != 'no') ]]; do
		read -r -p "${pr4}" || exit 1
		temp="${REPLY,,}"
	done
	if [[ (${temp} == 'yes') || (${temp} == 'y') ]]; then
		copy_warn='true'
	else
		copy_warn=''
	fi
fi

# check if Makefile already exists
makefile_name="${dest_dir}/Makefile"
warndir_name="${dest_dir}/${mks}"
if [[ -z "${no_prompt}" && -z "${overwrite}" ]]; then
	if [[ (-a "${makefile_name}") || ((-d "${warndir_name}") && (-n "${copy_warn}")) ]]; then
		pr5="File ${makefile_name} or ${warndir_name} already exists. Overwite: (^D to exit) [y/n] "
		temp=''
		while [[ ("${temp}" != 'y') && ("${temp}" != 'yes') && ("${temp}" != 'n') && ("${temp}" != 'no') ]]; do
			read -r -p "${pr5}" || exit 1
			temp="${REPLY,,}"
		done
		if [[ (${temp} == 'yes') || (${temp} == 'y') ]]; then
			overwrite='true'
		else
			overwrite=''
		fi
	fi
	echo
fi
if [[ -a "${makefile_name}" && -z "${overwrite}" ]]; then
	echo "Makefile ${makefile_name} already exists" >&2
	exit 1
fi
if [[ -d "${warndir_name}" && -n "${copy_warn}" && -z "${overwrite}" ]]; then
	echo "Warnings ${warndir_name} already exists" >&2
	exit 1
fi

# get the type info string
pr_type_info=''
declare -i i
for ((i=0; i<${#pr3[*]}; i++)); do
	x="${pr3[$i]}"
	if [[ "${pr_type}" == "${x%%\ *}" ]]; then
		pr_type_info="${x}"
		break
	fi
done

# final summary check
echo '**********************************************'
echo "Installing from ${src_dir}"
echo "Install into destination ${dest_dir}"
echo "Type of the makefile to install ${pr_type}"
echo "${pr_type_info}"
if [[ (-a "${makefile_name}") && (-n "${overwrite}") ]]; then
	echo "Overwrite makefile ${makefile_name} !"
fi
if [[ -n "${copy_warn}" ]]; then
	echo "Copy warnings into project directory."
	if [[ (-d "${warndir_name}") && (-n "${overwrite}") ]]; then
		echo "Overwrite warndir ${warndir_name} !"
	fi
fi
echo '**********************************************'
execute_all='true'
if [[ -z "${no_prompt}" ]]; then
	pr5='Proceed (^D to exit) [y/n] '
	temp=''
	while [[ ("${temp}" != 'y') && ("${temp}" != 'yes') && ("${temp}" != 'n') && ("${temp}" != 'no') ]]; do
		read -r -p "${pr5}" || exit 1
		temp="${REPLY,,}"
	done
	if [[ (${temp} == 'yes') || (${temp} == 'y') ]]; then
		execute_all='true'
	else
		execute_all=''
	fi
	echo
fi

# execution
if [[ -n ${execute_all} ]]; then
	echo -e "\nDo intstallation..."
	if [[ -a "${makefile_name}" ]]; then
		rm -v "${makefile_name}"
	fi
	case ${pr_type} in
		otocpp)
			src_name='one_to_one_cpp.mk';;
		ipbcpp)
			src_name='in_place_cpp.mk';;
		opbc)
			src_name='out_place_c.mk';;
		opbcpp)
			src_name='out_place_cpp.mk';;
		opb)
			src_name='out_place.mk'
	esac
	cp -v "${src_dir}/${src_name}" "${makefile_name}"
	if [[ -n "${copy_warn}" ]]; then
		mkdir -v "${warndir_name}"
		cp -v "${src_dir}/../../include/${mks}/"* "${warndir_name}"
	fi
	echo "**** All done ****"
else
	echo "**** Nothing to do ****"
fi

exit 0
