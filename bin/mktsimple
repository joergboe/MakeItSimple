#!/usr/bin/env bash

readonly version='4.4.2_dev'

#some setup to be save
IFS=$' \t\n'
#some recommended security settings
unset -f unalias
\unalias -a
unset -f command
#more setting to be save
set -o posix; set -o nounset;
shopt -s globstar

# guess the base directory of the mkts installation
my_install_dir=
my_command="${0##*/}"
if [[ "$0" == /* ]]; then
	my_install_dir="${0%"/bin/${my_command}"}"
elif [[ "$0" == "${my_command}" ]]; then
	x="$(which "${my_command}")"
	my_install_dir="${x%"/bin/${my_command}"}"
else
	x="$(pwd -P)/$0"
	my_install_dir="${x%"/bin/${my_command}"}"
fi

usage() {
	cat <<EOF

The Make It Simple project wizard - generate the makefile.

Usage: ${my_command} [option..]

OPTIONS:
	-h|--help                      : Display this help.
	--help=type                    : Print project type information.
	-p|--project-dir VALUE         : The base directory of the C/C++ project. Default: current directory.
	-y|--type|--project-type VALUE : The type of the project. Valid types are: otocpp, ipbcpp, opbcpp, opbc, opb.
	                                 To find out more about the types use option --help=type
	-c|--copy-warn                 : Make a local copy of the warning.mk files in the project directory.
	-t|--target-name VALUE         : Name of the executable to build. Default value is the last path component of
	                                 of the project directory.
	-s|--src|--src-dir VALUE       : Directory with the c/c++ source files. If the source files are located in more
	                                 than one directory, this option may be repeated. Default: src
	-i|--inc|--include-dir VALUE   : The project internal include directory for the quote form of the include directive (-iquote).
	                                 If header and source files are placed in the source directories, enter an empty string or a single space.
	                                 This option may be repeated. The default value is 'include'
	--cc|--CC VALUE                : C compiler to be used.
	--cxx|--cpp|--CXX VALUE        : C++ compiler to be used.
	--cppflags|--CPPFLAGS          : Extra compiler preprocessor options.
	--cflags|--CFLAGS              : Extra c compiler options.
	--cxxflags|--CXXFLAGS          : Extra c++ compiler options.
	--incsysdirs|--INCSYSDIRS      : Space separated list of external include directories used with compiler option -I.
	--ldflags|--LDFLAGS            : Extra linker options, such as -L
	--ldlibs|--LDLIBS              : Space separated list of libraries given to the linker.
	--hello-world                  : Create a hello world project.
	--no-kate-project              : Do not create a kate project.
	-o|--overwrite                 : Overwrite (and backup) existing files in project destination.
	-n|--no-prompt|--noprompt      : Do not enter the interactive mode and use the command line options only.
	-v|--version                   : Print version and exit.
	--mkts-install-dir VALUE       : The base directory of the mktsimple installation. The default
	                                 value is detected from the location of the ${my_command} script.
	-d|--debug                     : Print debug information.

RETURNS:
	0    : Success
	1    : Runtime error
	2    : Wrong invokation
	3    : User abort
EOF
}

readonly mkts='mktsimple'
readonly valid_types='opbcpp opbc opb ipbcpp otocpp'
readonly all_install_files='in_place_cpp.mk in_place_cpp.mk out_place_c.mk out_place_cpp.mk out_place_cpp.mk'
readonly -a pr3=(
	'opbcpp -- C++ project   Out Place Build'$'\n''    Build one executable from all %.cpp and %.cc source files in all project source directories.'$'\n'
	'opbc   -- C project     Out Place Build'$'\n''    Build one executable from all %.c source files in all project source directories.'$'\n'
	'opb    -- C/C++ project Out Place Build'$'\n''    Build one executable from all C++, C and assembler source files in all project source directories.'$'\n'
	'ipbcpp -- C++ project   In Place Build'$'\n''    Build one executable from all %.cpp and %.cc source files in the project directory.'$'\n'
	'otocpp -- C++ project   One To One'$'\n''    Build executable targets from each %.cpp and %.cc source file in the project directory.'$'\n'
	'exit'
)

col_red=
col_yel=
col_norm=
if [[ -t 2 ]]; then
	col_red="\033[31m"
	col_yel="\033[33m"
	col_norm="\033[0m"
fi
echoerr() {
	echo -e "${col_red}ERROR: $*${col_norm}" >&2
}
echowarn() {
	echo -e "${col_yel}WARNING: $*${col_norm}" >&2
}
echodeb() {
	echo -e "${col_yel}DEBUG: $*${col_norm}" >&2
}

typehelp() {
	local -i i
	for ((i=0; i<${#pr3[*]}; i++)); do
		if [[ "${pr3[$i]}" != exit* ]]; then
			echo "${pr3[$i]}"
		fi
	done
}

declare -A options=()
# Is item defined options
# $1 - varname
# options - input
defined_in_options() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	local temp
	for temp in "${!options[@]}"; do
		[[ "${temp}" == "$1" ]] && return 0
	done
	return 1
}

# check whether directory $1 contains valid install files
check_install_dir() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	local mypath="${1}/share/${mkts}"
	local x
	for x in ${all_install_files}; do
		#echo "checking: ${mypath}/${x}"
		if [[ ! -f "${mypath}/${x}" ]]; then
			echoerr "Source dir '$1' is not a valid installation!"
			return 1
		fi
	done
	return 0
}

# check whether directory $1 is valid
check_project_dir() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	if [[ -z $1 ]]; then
		echoerr "Empty string for project dir"
		return 1
	fi
	return 0
}

# check whether $1 is a valid project type
check_type() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	local x
	for x in $valid_types; do
		if [[ "$1" == "$x" ]]; then
			return 0
		fi
	done
	echoerr "Invalid project type: $1\nValid types are: $valid_types"
	return 1
}

abort_func() {
	echoerr "Something went wrong!"
	exit 1
}

# read yes/no form stdin
# $1 - Prompt
# $2 - name of in/output
# $3 - default value
# start over when the referenced value is not empty
read_yes_no() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	local temp
	declare -ln ref=$2
	while [[ -z ${ref} ]]; do
		read -r -p "$1 (Enter yes/no or ^D to exit) [$3] " || exit 3
		if [[ -z "${REPLY}" ]]; then
			temp="$3"
		else
			temp="${REPLY,,}"
		fi
		if [[ (${temp} == 'yes') || (${temp} == 'y') ]]; then
			ref='true'
			break
		elif [[ (${temp} == 'no') || (${temp} == 'n') ]]; then
			ref=
			break
		else
			ref=
		fi
	done
	echo
}

# read a value from stdin
# $1 - Prompt
# $2 - name of in/output
# $3 - default value
# $4 - validator (evaluated)
# start over when the referenced value is not empty
read_value() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	declare -ln ref=$2
	while true; do
		read -e -r -p "$1"$'\n' -i "$3" || exit 3
		if eval "$4 \"${REPLY}\""; then
			ref="${REPLY}"
			break
		fi
	done
	echo
}

# check command
# $1 - command name
check_command() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	if eval "$1" --version &> /dev/null; then
		return 0
	else
		echowarn "No such command $1 installed!"
		return 1
	fi
}

declare -A scan_result=()
# Is item defined in scan result (project file)
# $1 - varname
# scan_result - input
defined_in_scan_res() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	local temp
	for temp in "${!scan_result[@]}"; do
		[[ "${temp}" == "$1" ]] && return 0
	done
	return 1
}

# Scan item in project.mk
# $1 - varname
# store results in map scan_result
scan_project_mk_item() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	local temp1 temp2
	temp1=$(make --dry-run -f /dev/null --eval "include ${project_mk_name}"$'\n$(info $('"$1"$'))\n' 2> /dev/null)
	temp2=$(make --dry-run -f /dev/null --eval "include ${project_mk_name}"$'\n'"$1 ?= ******"$'\n$(info $('"$1"$'))\n' 2> /dev/null)
	if [[ "${temp1}" == "${temp2}" ]]; then
		scan_result["$1"]="${temp1}"
		echo "$1: ’${scan_result[$1]}’"
		echo "Variable $1 is defined in project file."
	fi
}

readonly project_entries_to_check='TARGET SRCDIRS INCDIRS CC CXX CPPFLAGS CFLAGS CXXFLAGS INCSYSDIRS LDFLAGS LDLIBS'
# Scan the project.mk and return values in:
scan_project_mk() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( )"
	echo "Reading project file: ${project_mk_name} ..."
	local temp
	for temp in ${project_entries_to_check}; do
		scan_project_mk_item "${temp}"
	done
	echo
	return 0
}

# determine a value
# $1 - name of the value store e. g. cpp_compiler
# $2 - name if the project file entry e.g CXX
# $3 - default value
# $4 - prompt
# $5 - check function name
determine_item() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	declare -ln ref=$1
	if defined_in_options "$1"; then
		ref=${options[$1]}
	else
		local tmp_def
		if defined_in_scan_res "$2"; then
			tmp_def="${scan_result[$2]}"
		else
			tmp_def="$3"
		fi
		if [[ -z "${no_prompt}" ]]; then
			read_value "$4" "$1" "${tmp_def}" "$5"
		else
			[[ -z "${ref}" ]] && ref=${tmp_def}
		fi
	fi
}

declare -A project_entry_required=()
for temp in ${project_entries_to_check}; do
	project_entry_required[${temp}]=''
done
# check whether a entry in project.mk is required
# $1 - var name
# $2 - requested value
# $3 - default value
# Result in map project_entry_required
check_project_entry_req() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	declare -p scan_result
	if defined_in_scan_res "$1"; then
		[[ "$2" != "${scan_result["$1"]}" ]] && project_entry_required["$1"]='true'
	else
		[[ "$2" != "$3" ]] && project_entry_required["$1"]='true'
	fi
}

# make a entry in project mk if required
# $1 - var name
# $2 - value of the variable
# $3 - comment
make_project_entry() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	if [[ -n "${project_entry_required['$1']}" ]]; then
		echo -e "# $3\n$1 := $2" >> "${project_mk_temp_name}" || abort_func
		echo "$1 := $2 >> ${project_mk_name}"
	fi
	return 0
}

# remove trailing slashes
# $1 - name of in/out
remove_trailing_slash() {
	[[ -z "${debug}" ]] || echodeb "${FUNCNAME[0]} ( $* )"
	declare -ln ref=$1
	while [[ "${ref}" != '/' && "${ref}" == */ ]]; do
		ref="${ref%/}"
	done
	return 0
}

# get the number of active cores
number_cores=$(getconf _NPROCESSORS_ONLN)
readonly number_cores

declare -rA single_options=([no_prompt]='-n --no-prompt --noprompt' [hello_world]='--hello-world'\
	[no_kateproject]='--no-kate-project' [copy_warn]='-c --copy-warn' [overwrite]='-o --overwrite'\
	[debug]='-d --debug')
declare -rA value_options=([mkts_install_dir]='--mkts-install-dir' [project_dir]='-p --project-dir'\
	[pr_type]='-y --type --project-type' [target_name]='-t --target-name' [c_compiler]='--cc --CC'\
	[cpp_compiler]='--cxx --cpp --CXX')
declare -rA repeatable_options=([src_dirs]='-s --src --src-dir' [inc_dirs]='-i --inc --include-dir'\
	[cppflags]='--cppflags --CPPFLAGS' [cflags]='--cflags --CFLAGS' [cxxflags]='--cxxflags --CXXFLAGS'\
	[incsysdirs]='--incsysdirs --INCSYSDIRS' [ldflags]='--ldflags --LDFLAGS' [ldlibs]='--ldlibs --LDLIBS')

no_prompt=
mkts_install_dir=
project_dir=
pr_type=
target_name=
src_dirs=
inc_dirs=
c_compiler=
cpp_compiler=
cppflags=
cflags=
cxxflags=
incsysdirs=
ldflags=
ldlibs=
hello_world=
no_kateproject=
copy_warn=
overwrite=
debug=

echo

# get parameters
while [[ $# -gt 0 ]]; do
	case "$1" in
	'-h'|'--help')
		usage
		exit 0;;
	'--help=type')
		typehelp
		exit 0;;
	'-v'|'--version')
		echo "${my_command} ${version}"
		exit 0;;
	*)
		found=
		for name in "${!single_options[@]}"; do
			for opt in ${single_options[${name}]}; do
				if [[ "$1" == "${opt}" ]]; then
					options[${name}]='true'
					found='true'
					break 2
				fi
			done
		done
		if [[ -z "${found}" ]]; then
			for name in "${!value_options[@]}"; do
				for opt in ${value_options[${name}]}; do
					if [[ "$1" == "${opt}" ]]; then
						if [[ $# -gt 1 ]]; then
							shift
							options[${name}]="$1"
							found='true'
							break 2
						else
							{ echoerr "Missing value for parameter $1\n"; usage; exit 2; } >&2
						fi
					fi
				done
			done
		fi
		if [[ -z "${found}" ]]; then
			for name in "${!repeatable_options[@]}"; do
				for opt in ${repeatable_options[${name}]}; do
					if [[ "$1" == "${opt}" ]]; then
						if [[ $# -gt 1 ]]; then
							shift
							if defined_in_options "${name}"; then
								options[${name}]+=" $1"
							else
								options[${name}]="$1"
							fi
							found='true'
							break 2
						else
							{ echoerr "Missing value for parameter $1\n"; usage; exit 2; } >&2
						fi
					fi
				done
			done
		fi
		[[ -z "${found}" ]] && { echoerr "Invalid parameter $1\n"; usage; exit 2; } >&2
	esac
	shift
done

for name in "${!options[@]}"; do
	declare -n ref="${name}"
	ref="${options[${name}]}"
done

echo -e "Make It Simple installation found in: ${my_install_dir}\n"

# request and validate mkts installation directory
if defined_in_options 'mkts_install_dir'; then
	mkts_install_dir="${options[mkts_install_dir]}"
else
	if [[ -z ${no_prompt} ]]; then
		read_value "Enter the base directory of the ${mkts} installation." 'mkts_install_dir' "${my_install_dir}" 'check_install_dir'
	else
		mkts_install_dir="${my_install_dir}"
	fi
fi
remove_trailing_slash 'mkts_install_dir'
! check_install_dir "${mkts_install_dir}" >&2 && exit 2

# request and validate project directory
if defined_in_options 'project_dir'; then
	project_dir="${options[project_dir]}"
else
	if [[ -z ${no_prompt} ]]; then
		read_value "Enter the project directory" 'project_dir' '.' 'check_project_dir'
	else
		[[ "${inc_dirs}" != "${scan_result['INCDIRS']}" ]] && project_entry_required['INCDIRS']='true'='.'
	fi
fi
! check_project_dir "${project_dir}" >&2 && exit 2

# request and validate the type of the installation
if defined_in_options 'pr_type'; then
	pr_type="${options[pr_type]}"
else
	if [[ -z ${no_prompt} ]]; then
		echo "Enter the type of the project."
		select x in "${pr3[@]}"; do
			case $REPLY in
				1|2|3|4|5)
					echo "$x"
					pr_type="${x%%\ *}"
					break;;
				6)
					exit 3;;
			esac
		done || exit 3
	fi
	echo
fi
! check_type "$pr_type" >&2 && exit 2

out_place_project_type=
[[ ${pr_type} == opb* ]] && out_place_project_type='true'
cpp_project_type=
[[ "${pr_type}" == *cpp || "${pr_type}" == 'opb' ]] && cpp_project_type='true'
c_project_type=
[[ "${pr_type}" == 'opbc' || "${pr_type}" == 'opb' ]] && c_project_type='true'
readonly cpp_project_type c_project_type

# define required file names
readonly makefile_name="${project_dir}/Makefile"
readonly warndir_name="${project_dir}/${mkts}"
readonly project_mk_name="${project_dir}/project.mk"
readonly project_mk_temp_name="${project_dir}/.project.mk"
readonly kateproject_name="${project_dir}/.kateproject"
readonly kateproject_temp_name="${project_dir}/kateproject.tmp"

# scan project file if any
[[ -r "${project_mk_name}" ]] && scan_project_mk

# determination of default target name from project directory
temp=$(realpath --canonicalize-missing --logical "${project_dir}")
temp=${temp%/}
defaul_target_name=${temp##*/}
# request target name
if defined_in_options 'target_name'; then
	target_name="${options[target_name]}"
else
	if [[ "${pr_type}" == oto* ]]; then
		target_name=
	else
		if defined_in_scan_res 'TARGET'; then
			tmp_def="${scan_result['TARGET']}"
		else
			tmp_def="${defaul_target_name}"
		fi
		if [[ -z "${no_prompt}" ]]; then
			read_value "Name of the executable to build?" 'target_name' "${tmp_def}" 'true'
		else
			target_name="${tmp_def}"
		fi
	fi
fi
# check target name
if [[ "${pr_type}" == oto* ]]; then
	[[ -n ${target_name} ]] && { echoerr "No target name allowed in One To One project type"; exit 2; }
else
	[[ -z ${target_name} ]] && { echoerr "No target name!"; exit 2; }
fi

if [[ -n ${out_place_project_type} ]]; then
	# request source dir list
	determine_item 'src_dirs' 'SRCDIRS' 'src' "Enter a space separated source directory list." 'true'

	# request include dir list
	determine_item 'inc_dirs' 'INCDIRS' 'include' "Enter a space separated include directory list." 'true'
fi

# request incsysdirs
if [[ "${pr_type}" == oto* ]]; then
	determine_item 'incsysdirs' 'INCSYSDIRS' '' \
	"Enter a space separated list of external include directories used with compiler option -I." 'true'
fi

# request c compiler
default_c_compiler=$(make --dry-run -f /dev/null --eval $'\n$(info $(CC))\n' 2> /dev/null) || true
if [[ -n "${c_project_type}" ]]; then
	determine_item 'c_compiler' 'CC' "${default_c_compiler}" "C-Compiler?" 'check_command'
	check_command "${c_compiler}" || { echoerr "No such compiler ${c_compiler} installed!"; exit 2; }
fi
	

# request cpp compiler
default_cpp_compiler=$(make --dry-run -f /dev/null --eval $'\n$(info $(CXX))\n' 2> /dev/null) || true
if [[ -n "${cpp_project_type}" ]]; then
	determine_item 'cpp_compiler' 'CXX' "${default_cpp_compiler}" "C++-Compiler?" 'check_command'
	check_command "${cpp_compiler}" || { echoerr "No such compiler ${cpp_compiler} installed!"; exit 2; }
fi

# request CPPFLAGS
determine_item 'cppflags' 'CPPFLAGS' '' "Enter the prepocessor flags." 'true'

# request CFLAGS
if [[ -n "${c_project_type}" ]]; then
	determine_item 'cflags' 'CFLAGS' '' "Enter the c compiler flags." 'true'
fi

# request CXXFLAGS
if [[ -n "${cpp_project_type}" ]]; then
	determine_item 'cxxflags' 'CXXFLAGS' '' "Enter the c++ compiler flags." 'true'
fi

# request LDFLAGS
determine_item 'ldflags' 'LDFLAGS' '' "Enter extra linker options, such as -L" 'true'

# request LDLIBS
determine_item 'ldlibs' 'LDLIBS' '' "Enter space separated list of libraries given to the linker (including -l)" 'true'

# request copy warnings local option
if defined_in_options 'copy_warn'; then
	copy_warn=${options['copy_warn']}
else
	if [[ -z "${no_prompt}" ]]; then
		read_yes_no "Make a local copy of the warning files in the project directory?" 'copy_warn' 'no'
	fi
fi

# request hello world
if defined_in_options 'hello_world'; then
	hello_world=${options['hello_world']}
else
	if [[ -z "${no_prompt}" ]]; then
		read_yes_no "Create a hello world project?" 'hello_world' 'no'
	fi
fi

# request kateproject
if defined_in_options 'no_kateproject'; then
	no_kateproject=${options['no_kateproject']}
else
	if [[ -z "${no_prompt}" ]]; then
		kateproject=
		read_yes_no "Create a Kate project file?" 'kateproject' 'yes'
		if [[ -z ${kateproject} ]]; then
			no_kateproject='true'
		else
			no_kateproject=
		fi
	fi
fi

# check src dir list / inc dir list and project type
if [[ -z ${out_place_project_type} ]]; then
	if [[ -n $src_dirs ]]; then
		echoerr "Source directory '${src_dirs}'specified but project is in place type ${pr_type}"
		exit 2
	fi
	if [[ -n $inc_dirs ]]; then
		echoerr "Include directory '${inc_dirs}'specified but project is in place type ${pr_type}"
		exit 2
	fi
	module_name="${project_dir}/hello.c"
	module_temp_name="${project_dir}/.hello.x"
else
	if [[ -z $src_dirs ]]; then
		echoerr "No source directory specified but project is out place type ${pr_type}"
		exit 2
	fi
	if [[ -z $inc_dirs ]]; then
		echoerr "No include directory specified but project is in place type ${pr_type}"
		exit 2
	fi
	first_src_dir=
	for temp in ${src_dirs}; do
		first_src_dir="${temp}"
		break
	done
	module_name="${project_dir}/${first_src_dir}/hello.c"
	module_temp_name="${project_dir}/${first_src_dir}/.hello.x"
fi
if [[ -n "${cpp_project_type}" ]]; then
	module_name="${module_name}pp"
fi

# check if a project file entry is required
if [[ ${pr_type} != oto* ]]; then
	check_project_entry_req 'TARGET' "${target_name}" "${defaul_target_name}"
fi
if [[ -n ${out_place_project_type} ]]; then
	check_project_entry_req 'SRCDIRS' "${src_dirs}" 'src'

	if defined_in_scan_res 'INCDIRS'; then
		[[ "${inc_dirs}" != "${scan_result['INCDIRS']}" ]] && project_entry_required['INCDIRS']='true'
	elif [[ "${inc_dirs}" == 'include' ]]; then
		:	# dir will be created later
	elif [[ -z "${inc_dirs}" ]]; then
		if [[ -d "${project_dir}/include" ]]; then
			echowarn "Directory include exists and will be used with -I option!\nConsider to delete the directory."
		fi
	else 
		project_entry_required['INCDIRS']='true'
	fi
fi
if [[ -n "${c_project_type}" ]]; then
	check_project_entry_req 'CC' "${c_compiler}" "${default_c_compiler}"
	check_project_entry_req 'CFLAGS' "${cflags}" ''
fi
if [[ -n "${cpp_project_type}" ]]; then
	check_project_entry_req 'CXX' "${cpp_compiler}" "${default_cpp_compiler}"
	check_project_entry_req 'CXXFLAGS' "${cxxflags}" ''
fi
check_project_entry_req 'CPPFLAGS' "${cppflags}" ''
check_project_entry_req 'INCSYSDIRS' "${incsysdirs}" ''
check_project_entry_req 'LDFLAGS' "${ldflags}" ''
check_project_entry_req 'LDLIBS' "${ldlibs}" ''

project_mk_required=
for temp in ${project_entries_to_check}; do
	if [[ -n "${project_entry_required[${temp}]}" ]]; then
		project_mk_required='true'
		break
	fi
done

# check if some files already exists
overwrite_makefile=
overwrite_project_mk=
overwrite_module=
overwrite_warn_dir=
overwrite_kateproject=
overwrite_necessary=
[[ -a "${makefile_name}" ]] && overwrite_makefile='true'
[[ -n "${project_mk_required}" && -a "${project_mk_name}" ]] && overwrite_project_mk='true'
[[ -n "${hello_world}" && -a "${module_name}" ]] && overwrite_module='true'
[[ -n "${copy_warn}" && -d "${warndir_name}" ]] && overwrite_warn_dir='true'
[[ -z "${no_kateproject}" && -a "${kateproject_name}" ]] && overwrite_kateproject='true'
[[ -n ${overwrite_makefile} || -n ${overwrite_project_mk} || -n ${overwrite_module} || -n ${overwrite_warn_dir} || -n ${overwrite_kateproject} ]] && overwrite_necessary='true'
if [[ -n ${overwrite_necessary} ]]; then
	[[ -n "${overwrite_makefile}" ]] && echo "Request backup makefile ${makefile_name} !"
	[[ -n "${overwrite_project_mk}" ]] && echo "Request backup project file ${project_mk_name} !"
	[[ -n "${overwrite_module}" ]] && echo "Request backup modul ${module_name} !"
	[[ -n "${overwrite_warn_dir}" ]] && echo "Request overwrite warnings in dir ${warndir_name} !"
	[[ -n "${overwrite_kateproject}" ]] && echo "Request backup kate project file ${kateproject_name} !"
	if [[ -z "${no_prompt}" ]]; then
		read_yes_no "Some files already exists. Overwite?" 'overwrite' 'no'
	fi
fi
if [[ -z ${overwrite} && -n ${overwrite_necessary} ]]; then
	[[ -n "${overwrite_makefile}" ]] && echoerr "Makefile ${makefile_name} already exists"
	[[ -n "${overwrite_project_mk}" ]] && echoerr "Projectfile ${project_mk_name} already exists"
	[[ -n "${overwrite_module}" ]] && echoerr "Project modul ${module_name} already exists"
	[[ -n "${overwrite_warn_dir}" ]] && echoerr "Warnings ${warndir_name} already exists"
	[[ -n "${overwrite_kateproject}" ]] && echoerr "kateproject file ${kateproject_name} already exists"
	exit 1
fi

# get the type info string
pr_type_info=''
declare -i i
for ((i=0; i<${#pr3[*]}; i++)); do
	x="${pr3[$i]}"
	if [[ "${pr_type}" == "${x%%\ *}" ]]; then
		pr_type_info="${x}"
		break
	fi
done

# final summary check
echo '**********************************************************************************'
echo "Make It Simple installing directory ${mkts_install_dir}"
echo "${number_cores} cores online found"
echo
echo "Project directory ${project_dir}"
echo "Type of the makefile to install ${pr_type}"
echo "	${pr_type_info}"
if [[ ${pr_type} != oto* ]]; then
	echo "Name of the executable to build: ${target_name}"
fi
if [[ -n ${out_place_project_type} ]]; then
	echo "Directories with the source files: ${src_dirs}"
	echo "Include directories: ${inc_dirs}"
fi
[[ -n "${c_project_type}" ]] && echo "C compiler: ${c_compiler}"
[[ -n "${cpp_project_type}" ]] && echo "C++ compiler: ${cpp_compiler}"
[[ -n "${hello_world}" ]] && echo "Create hello world program module ${module_name}"
[[ -n "${copy_warn}" ]] && echo "Copy warnings into project directory."
[[ -z "${no_kateproject}" ]] && echo "Create a Kate project file ${kateproject_name}"
temp='no'
[[ -n ${overwrite} ]] && temp='yes'
echo "Overwrite and backup existing files: $temp"
echo '**********************************************************************************'
execute_all=
if [[ -z "${no_prompt}" ]]; then
	read_yes_no 'Proceed?' 'execute_all' 'no'
else
	execute_all='true'
fi

# execution
if [[ -n ${execute_all} ]]; then
	echo -e "\nDo intstallation..."
	# create project directory
	mkdir -p "${project_dir}" || abort_func
	# Makefile
	case ${pr_type} in
		otocpp)
			src_name='one_to_one_cpp.mk';;
		ipbcpp)
			src_name='in_place_cpp.mk';;
		opbc)
			src_name='out_place_c.mk';;
		opbcpp)
			src_name='out_place_cpp.mk';;
		opb)
			src_name='out_place.mk'
	esac
	if [[ -e ${makefile_name} ]] && diff "${mkts_install_dir}/share/${mkts}/${src_name}" "${makefile_name}" &> /dev/null; then
		echo "Makefile is up to date."
	else
		cp -v --backup=numbered "${mkts_install_dir}/share/${mkts}/${src_name}" "${makefile_name}" || abort_func
	fi
	# create dirs
	if [[ -n ${out_place_project_type} ]]; then
		for temp in ${src_dirs}; do
			mkdir -pv "${project_dir}/${temp}" || abort_func
		done
		for temp in ${inc_dirs}; do
			mkdir -pv "${project_dir}/${temp}" || abort_func
		done
	fi
	# project.mk
	if [[ -n "${project_mk_required}" ]]; then
		if [[ -a "${project_mk_name}" ]]; then
			cp -p "${project_mk_name}" "${project_mk_temp_name}" || abort_func
		fi
		echo -e "\n# *** Section created by mktsimple ***" >> "${project_mk_temp_name}" || abort_func
		make_project_entry 'TARGET' "${target_name}" 'Name of the executable'
		make_project_entry 'SRCDIRS' "${src_dirs}" 'Space separated list of directories with source files'
		make_project_entry 'INCDIRS' "${inc_dirs}" 'Space separated list of project internal include directories'
		make_project_entry 'CC' "${c_compiler}" 'C compiler to be used'
		make_project_entry 'CXX' "${cpp_compiler}" 'C++ compiler to be used'
		make_project_entry 'CPPFLAGS' "${cppflags}" 'C preprocessor flags'
		make_project_entry 'CFLAGS' "${cflags}" 'C compiler flags'
		make_project_entry 'CXXFLAGS' "${cxxflags}" 'C++ compiler flags'
		make_project_entry 'INCSYSDIRS' "${incsysdirs}" 'Space separated list of external include directories used with compiler option -I'
		make_project_entry 'LDFLAGS' "${ldflags}" 'Extra linker options, such as -L'
		make_project_entry 'LDLIBS' "${ldlibs}" 'Space separated list of libraries given to the linker (including -l)'
		
		mv -v --backup=numbered "${project_mk_temp_name}" "${project_mk_name}" || abort_func
	fi
	# hello
	if [[ -n "${hello_world}" ]]; then
		if [[ -n ${cpp_project_type} ]]; then
			echo -e "#include <iostream>\nint main(int argc, char* argv[]) {\n	std::cout << \"Hello World !!!\" << std::endl;\n	return 0;\n}" > "${module_temp_name}" || abort_func
			echo "Write ${module_name}"
		else
			echo -e "#include <stdio.h>\nint main(int argc, char* argv[]) {\n	printf(\"Hello World !!!\\\\n\");\n	return 0;\n}" > "${module_temp_name}" || abort_func
			echo "Write ${module_name}"
		fi
		if [[ -e "${module_name}" ]] && diff "${module_temp_name}" "${module_name}" &> /dev/null; then
			echo "${module_name} is up to date."
			rm "${module_temp_name}"
		else
			mv -v --backup=numbered "${module_temp_name}" "${module_name}" || abort_func
		fi
	fi
	# warn directory
	if [[ -n "${copy_warn}" ]]; then
		mkdir -pv "${warndir_name}" || abort_func
		cp -v --no-dereference "${mkts_install_dir}/include/${mkts}/"* "${warndir_name}" || abort_func
	fi

	# kateproject
	if [[ -z "${no_kateproject}" ]]; then
		invocation_opt=
		if [[ "${mkts_install_dir}" != '/usr/local' && -z "${copy_warn}" ]]; then
			invocation_opt="-I ${mkts_install_dir}/include "
		fi
		case ${pr_type} in
		otocpp)
			run_cmd_deb=
			run_cmd_run=;;
		ipbcpp)
			run_cmd_deb=$',\n\t\t\t\t"run_cmd": "./'"${target_name}"$'"\n'
			run_cmd_run=$',\n\t\t\t\t"run_cmd": "./'"${target_name}"$'"\n';;
		*)
			run_cmd_deb=$',\n\t\t\t\t"run_cmd": "debug/'"${target_name}"$'"\n'
			run_cmd_run=$',\n\t\t\t\t"run_cmd": "run/'"${target_name}"$'"\n'
		esac
		cat > "${kateproject_temp_name}" <<EOF
{
	"name": "${defaul_target_name}",
	"files": [
		{ "directory": ".", "hidden": 0 }
	],
	"exclude_patterns" : [
		"^debug/build/.*",
		"^run/build/.*",
		".*\\\\.o",
		".*\\\\.dep",
		".*\\\\.mks\\\\.tmp",
		"compile_commands\\\\.json",
		".*\\\\.~.*"
	],
	"build": {
		"directory": ".",
		"build": "make all",
		"clean": "make clean",
		"install": "make install",
		"targets": [
			{
				"name": "Serial build, debug config",
				"build_cmd": "make ${invocation_opt}all"${run_cmd_deb}
			},
			{
				"name": "Build, debug config",
				"build_cmd": "make ${invocation_opt}--jobs=${number_cores} --output-sync=target --keep-going all"${run_cmd_deb}
			},
			{
				"name": "Cleanup, debug config",
				"build_cmd": "make ${invocation_opt}clean"
			},
			{
				"name": "Clean build, debug config",
				"build_cmd": "make ${invocation_opt}clean; make ${invocation_opt}--jobs=${number_cores} --output-sync=target --keep-going all"${run_cmd_deb}
			},
			{
				"name": "Build, run config",
				"build_cmd": "make ${invocation_opt}clean; make ${invocation_opt}BUILD_MODE=run --jobs=${number_cores} --output-sync=target --keep-going all"${run_cmd_run}
			},
			{
				"name": "Cleanup, run config",
				"build_cmd": "make ${invocation_opt}BUILD_MODE=run clean"
			},
			{
				"name": "Increment warning level",
				"build_cmd": "make ${invocation_opt}inc_warn_level"
			},
			{
				"name": "Decrement warning level",
				"build_cmd": "make ${invocation_opt}dec_warn_level"
			},
			{
				"name": "Project info, debug config",
				"build_cmd": "make ${invocation_opt}show"
			},
			{
				"name": "Project info, run config",
				"build_cmd": "make ${invocation_opt}BUILD_MODE=run show"
			},
			{
				"name": "Help",
				"build_cmd": "make ${invocation_opt}help"
			},
			{
				"name": "Purge",
				"build_cmd": "make ${invocation_opt}purge"
			}
		]
	}
}
EOF
		if [[ -e "${kateproject_name}" ]] && diff "${kateproject_temp_name}" "${kateproject_name}" &> /dev/null; then
			echo "${kateproject_name} is up to date."
			rm "${kateproject_temp_name}"
		else
			mv -v --backup=numbered "${kateproject_temp_name}" "${kateproject_name}" || abort_func
		fi
		local_kateproject_files=
		for x in "${project_dir}/".kateproject.[^~]*; do
			local_kateproject_files=" $x"
		done
		if [[ "${local_kateproject_files}" != " ${project_dir}/.kateproject.[^~]*" ]]; then
			echowarn "There are other (probably generated) .kateproject files:${local_kateproject_files}"\
			"\nThe just created file ${kateproject_name} is probably effectless!"\
			"\nConsider deleting those files."
		fi
	fi

	echo "**** All done ****"
else
	echo "**** Nothing to do ****"
fi

exit 0
